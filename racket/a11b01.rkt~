;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-intermediate-lambda-reader.ss" "lang")((modname a11b01) (read-case-sensitive #t) (teachpacks ()) (htdp-settings #(#t constructor repeating-decimal #f #t none #f () #f)))
;; ***************************************************
;; Nathan Kwon (20934403)
;; CS 135 Fall 2021
;; Assignment 11, Bonus 02
;; ***************************************************

;; (find-clique k nodes) produces a list of [k] Node representing a clique of size
;;   [k] in the given graph [nodes] if one exists. Note that any clique of the given
;;   size may be produced. If no clique of size [k] exists in the graph, the function
;;   produces false.

;; Examples:
(check-expect (find-clique 0 vegetable-plot) empty)

;; find-clique: Nat UGraph -> (anyof (listof Node) false) 
(define (find-clique k nodes)
  (cond [(= k 0) empty]
        [(empty? nodes) false]
        [else (find-clique/acc k (first (first nodes))
                 nodes (second (first nodes)) (list (first (first nodes))))])) 

;; Tests:
(check-expect (find-clique 1 vegetable-plot) '(cauliflower))
(check-expect (find-clique 5 empty) false)
(check-expect (find-clique 2 vegetable-plot) '(broccoli cauliflower))
(check-expect (find-clique 3 vegetable-plot) '(turnip rapini kale))
(check-expect (find-clique 4 vegetable-plot) '(tatsoi turnip rapini kale))
(check-expect (find-clique 5 vegetable-plot) false)
(check-expect (find-clique 4 g) (list 'square 'pepper 'potato 'eggplant))
(check-expect (find-clique 2 g) (list 'potato 'eggplant))
(check-expect (find-clique 1 g) (list 'eggplant))
(check-expect (find-clique 5 random-plot) (list 'train 'elephant 'bus 'airplane 'car))
(check-expect (find-clique 3 test-ugraph5) '(C B A))
(check-expect (find-clique 4 test-ugraph5) (list 'G 'F 'E 'D))


;; (find-clique/list k orig g neighbours clique-so-far) produces false
;;    if the combinations between [orig] and [neighbours] cannot form a
;;    clique of desired length [k]. Note that cliques are a set of nodes
;;    in an undirected graph G such that every pair in the set has an
;;    undirected edge connecting them. If there is a clique in the
;;    given undirected graph [g], it will be built up recursively
;;    in [clique-so-far] and produced.

;; Examples:
(check-expect (find-clique/list 0 'C vegetable-plot (list 'D 'E 'F) empty) empty)
(check-expect (find-clique/list 1 'cauliflower vegetable-plot (list 'broccoli) empty) '(broccoli))
(check-expect (find-clique/list 2 'cauliflower vegetable-plot (list 'broccoli) empty) false)
(check-expect (find-clique/list 2 'broccoli vegetable-plot (list 'cauliflower 'kale) empty)
              false)

;; find-clique/list: Nat Node UGraph (listof Node) (listof Node) -> (anyof false (listof Node))
(define (find-clique/list k orig g neighbours clique-so-far)
  (cond [(= (length clique-so-far) k) 
         (cond [(clique? clique-so-far g) clique-so-far]
               [else false])]
        [(empty? neighbours) false]
        [else (find-clique/list k orig g (rest neighbours) 
                               (append (list (first neighbours)) clique-so-far))]))


;; (find-clique/acc k orig g neighbours clique-so-far) produces false
;;    if the combinations between [orig] and [neighbours] cannot form a
;;    clique of desired length [k]. Note that cliques are a set of nodes
;;    in an undirected graph G such that every pair in the set has an
;;    undirected edge connecting them. If there is a clique in the
;;    given undirected graph [g], it will be built up recursively
;;    in [clique-so-far] and produced.

;; Examples:
(check-expect (find-clique/acc 0 'C vegetable-plot (list 'D 'E 'F) empty) empty)
(check-expect (find-clique/acc 1 'cauliflower vegetable-plot (list 'broccoli) empty) '(broccoli))
(check-expect (find-clique/acc 2 'cauliflower vegetable-plot (list 'broccoli) empty)
              (list 'kale 'broccoli)) 
(check-expect (find-clique/acc 2 'broccoli vegetable-plot (list 'cauliflower 'kale) empty)
              (list 'kale 'broccoli))

;; find-clique/acc: Nat Node UGraph (listof Node) (listof Node) -> (anyof false (listof Node))
(define (find-clique/acc k orig g neighbours clique-so-far)
  (cond [(and (empty? neighbours) (empty? (rest g))) false] 
        [(empty? neighbours)
         (find-clique/acc k (first (first (rest g))) 
                          (rest g) (second (first (rest g))) (list (first (first (rest g)))))]  
        [(false? (find-clique/list k orig g neighbours clique-so-far))
         (find-clique/acc k orig g (rest neighbours) clique-so-far)]
        [else (find-clique/list k orig g neighbours clique-so-far)]))