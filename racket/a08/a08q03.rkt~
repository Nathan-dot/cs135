;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-intermediate-reader.ss" "lang")((modname a08q03) (read-case-sensitive #t) (teachpacks ()) (htdp-settings #(#t constructor repeating-decimal #f #t none #f () #f)))
;; ***************************************************
;; Nathan Kwon (20934403)
;; CS 135 Fall 2021
;; Assignment 08, Problem 3
;; ***************************************************

(define-struct orgnode (name employees))
;; An OrgChart is a (make-orgnode Str (listof OrgChart)) 
;;   Requires: name is unique

(define my-orgchart (make-orgnode "Jane"
                                  (list (make-orgnode "Bob"
                                                      (list (make-orgnode "Alice" empty)
                                                            (make-orgnode "Greg" empty)))
                                        (make-orgnode "Jim" empty)
                                        (make-orgnode "Eric" empty))))

(define my-orgchart1 (make-orgnode "Jane"
                                   (list (make-orgnode "Bob"
                                                       (list (make-orgnode "Alice"
                                                                           (list (make-orgnode
                                                                                          "Corby"
                                                                                          empty)))
                                                             (make-orgnode "Greg" empty)))
                                         (make-orgnode "Jim" empty)
                                         (make-orgnode "Eric" (list (make-orgnode "Shuma" empty)
                                                                    (make-orgnode "Tom" empty))))))


;; a.)
;; (bottom-rung org-chart) produces a list of employees that do not supervise
;;     anyone, which are the "leaves" of the tree in the given [org-chart]. The
;;     produced list can be in any order.

;; Examples:
(check-expect (bottom-rung 
               (make-orgnode "Jamal" (list (make-orgnode "Zahara" empty))))
              (list "Zahara"))
(check-expect (bottom-rung my-orgchart) (list "Jim" "Eric" "Alice" "Greg"))

;; bottom-rung: OrgChart -> (listof Str)
(define (bottom-rung org-chart)
  (cond [(empty? (orgnode-employees org-chart)) empty]
        [else (local [(define (non-supervisors employees list1)
                        (cond [(empty? employees) list1]
                              [(empty? (orgnode-employees (first employees))) 
                               (non-supervisors (rest employees)
                                                (cons (orgnode-name (first employees)) list1))]
                              [else (append (non-supervisors
                                             (orgnode-employees (first employees)) list1)
                                            (non-supervisors (rest employees) list1))]))
                      (define (is-member-already? list1 non-repeats)
                        (cond [(empty? list1) non-repeats]
                              [(member? (first list1) (rest list1))
                               (is-member-already? (rest list1) non-repeats)]
                              [else (is-member-already? (rest list1)
                                                        (cons (first list1) non-repeats))]))]
                (is-member-already? (non-supervisors (orgnode-employees org-chart) empty) empty))]))

;; Tests:
(check-expect (bottom-rung (make-orgnode "Kl" empty)) empty)
(check-expect (bottom-rung my-orgchart1) (list "Jim" "Shuma" "Tom" "Greg" "Corby"))
(check-expect (bottom-rung (make-orgnode "Jane"
                                   (list (make-orgnode "Bob"
                                                       (list (make-orgnode "Alice"
                                                                           (list (make-orgnode
                                                                                          "Corby"
                                                                                          empty)))
                                                             (make-orgnode "Greg" empty)))
                                         (make-orgnode "Jim" empty)
                                         (make-orgnode "Eric" (list (make-orgnode "Shuma"
                                                                                  (list (make-orgnode "Tyler" empty)
                                                                                        (make-orgnode "David" empty)))
                                                                    (make-orgnode "Tom" empty))))))
              (list "Jim" "Tom" "Tyler" "David" "Greg" "Corby"))


;; b.)

