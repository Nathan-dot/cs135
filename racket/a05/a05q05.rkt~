;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-beginner-abbr-reader.ss" "lang")((modname a05q05) (read-case-sensitive #t) (teachpacks ()) (htdp-settings #(#t constructor repeating-decimal #f #t none #f () #f)))
;; ***************************************************
;; Nathan Kwon (20934403)
;; CS 135 Fall 2021
;; Assignment 05, Problem 4
;; ***************************************************

;; Accessor Functions:
(define (r-qnum response) (first response))
(define (r-ans response) (second response))

;; a.)
;; A Ranked-List is a (listof Sym).
;;   Requires: The given list cannot contain duplicates.
;; A Response is a (list Nat (anyof Bool Str Int Ranked-List))
;;   Requires: Nat cannot equal 0

;; b.)
;; (response-similarity response1 response2) produces the similarity of
;;    the two answers [response1] and [response2], which is measured by
;;    a number between 0 and 1 (inclusive).

;; Examples:
(check-expect (response-similarity 
               (list 2 (list 'sports 'games 'photo 'sentinel 'cooking))
               (list 2 (list 'sports 'photo 'sentinel 'cooking 'games)))
              (/ (+ 3 2 1 1) (+ (+ 3 2 1) (+ 2 1)))) 
(check-expect (response-similarity
               (list 2 (list 'sports 'photo 'sentinel 'cooking 'games))
               (list 2 (list 'sports 'games 'photo 'sentinel 'cooking)))
              (/ (+ 3 2 1 1) (+ (+ 3 2 1) (+ 2 1)))) 

;; (response-similarity response1 response2) produces 1 if [response1] and [response2]
;;   have identical question numbers and answers (response answers being non-case sensitive).
;;   Otherwise, this produces 0.

;; Examples:
(check-expect (response-similarity (list 3 true) (list 3 "help")) 0)
(check-expect (response-similarity (list 3 "help") (list 3 "help")) 1)

;; response-similarity: Response Response -> (anyof 0 1)
(define (response-similarity response1 response2)
  (cond [(and (response-qnum-similar response1 response2)
              (response-ans-similar response1 response2)) 1]
        [(and (list? (second response1)) (list? (second response2)) 
              (= (length (second response1)) (length (second response2)))
              (same-list? (sentinel-check (second response1)) (sentinel-check (second response2)))) 1] 
        [(and (list? (second response1)) (list? (second response2)))
         (sentinel-similarity (second response1) (second response2))]
        [else 0]))

;; Tests:
(check-expect (response-similarity (list 3 true) (list 3 true)) 1)
(check-expect (response-similarity (list 3 false) (list 3 true)) 0)
(check-expect (response-similarity (list 2 "help") (list 3 "help")) 0)
(check-expect (response-similarity (list 3 "help") (list 3 "halp")) 0)
(check-expect (response-similarity (list 3 5) (list 3 5)) 1)
(check-expect (response-similarity (list 3 0) (list 3 1)) 0)

(check-expect (response-similarity (list 4 (list )) (list 4 (list ))) 0)
(check-expect (response-similarity (list 4 (list 'sentinel)) (list 4 (list 'sentinel))) 0)
(check-expect (response-similarity (list 4 (list 'test 'broke)) (list 4 (list ))) 0)
(check-expect (response-similarity (list 4 (list )) (list 4 (list 'test 'broke))) 0)
(check-expect (response-similarity (list 4 (list 'test 'broke)) (list 4 (list 'broke)))
              (/ (+ 1 1) (+ 2 1 1)))
(check-expect (response-similarity (list 4 (list 'test 'sentinel 'broke))
                                   (list 4 (list 'broke))) 0)
(check-expect (response-similarity (list 4 (list 'sentinel 'test 'broke))
                                   (list 4 (list 'broke))) 0)
(check-expect (response-similarity (list 4 (list 'test 'broke))
                                   (list 4 (list 'test 'broke))) 1)
(check-expect (response-similarity (list 4 (list 'sentinel 'test 'broke))
                                   (list 4 (list 'test 'broke))) 0)
(check-expect (response-similarity (list 4 (list 'test 'sentinel 'broke))
                                   (list 4 (list 'test 'broke))) (/ (+ 1 2) (+ 1 2 1)))
(check-expect (response-similarity (list 4 (list 'test 'broke))
                                   (list 4 (list 'test 'a 'b 'c 'd 'e 'f 'g 'h 'i 'broke)))
              (/ (+ 2 11 1 1) (+ 2 1 11 10 9 8 7 6 5 4 3 2 1)))
(check-expect (response-similarity (list 4 (list 'test 'a 'b 'c 'd 'sentinel 'e 'f 'g 'h 'i 'broke))
                                   (list 4 (list 'test 'broke)))
              (/ (+ 2 5) (+ 2 1 5 4 3 2 1)))
(check-expect (response-similarity (list 4 (list 'a 'b 'c)) (list 4 (list 'c 'b 'a))) 1)
(check-expect (response-similarity (list 4 (list 'a 'b 'c)) (list 4 (list 'c 'sentinel 'a)))
              (/ (+ 1 1) (+ 3 2 1 1)))

(define (same-list? list1 list2) 
  (cond [(empty? list1) true]
        [else (and (member? (first list1) list2) (same-list? (rest list1) list2))])) 

(same-list? (list 'a 'b 'c) (list 'c 'b 'a))
(same-list? (list 'sports 'games 'photo 'sentinel 'cooking)
            (list 'sports 'photo 'sentinel 'cooking 'games)) 

;; (response-qnum-similar response1 response2) produces true if
;;    [response1] and [response2] share identical question numbers.
;;    Otherwise, it produces false.

;; Examples:
(check-expect (response-qnum-similar (list 3 true) (list 3 true)) true)
(check-expect (response-qnum-similar (list 2.5 false) (list 3 true)) false)
(check-expect (response-qnum-similar (list 2 "help") (list 3 "help")) false)
(check-expect (response-qnum-similar (list 3 "help") (list 3 "halp")) true)
(check-expect (response-qnum-similar (list 2 5) (list 3 5)) false)
(check-expect (response-qnum-similar (list 3 0) (list 3 1)) true)

;; response-qnum-similar: Response Response -> Bool
(define (response-qnum-similar response1 response2)
  (cond [(= (r-qnum response1) (r-qnum response2)) true]
        [else false]))


;; (response-ans-similar response1 response2) produces true if
;;    [response1] and [response2] have identical question answers.
;;    Otherwise, it produces false.

;; Examples:
(check-expect (response-ans-similar (list 3 true) (list 3 true)) true) 
(check-expect (response-ans-similar (list 2.5 false) (list 3 true)) false)
(check-expect (response-ans-similar (list 2 "help") (list 3 "help")) true)
(check-expect (response-ans-similar (list 3 "help") (list 3 "halp")) false)
(check-expect (response-ans-similar (list 2 5) (list 3 5)) true)
(check-expect (response-ans-similar (list 3 0) (list 3 1)) false) 

;; response-ans-similar: Response Response -> Bool
(define (response-ans-similar response1 response2)
  (cond [(and (boolean? (r-ans response1)) (boolean? (r-ans response2))
              (boolean=? (r-ans response1) (r-ans response2))) true]
        [(and (string? (r-ans response1)) (string? (r-ans response2))
              (string=? (string-downcase (r-ans response1))
                        (string-downcase (r-ans response2)))) true]
        [(and (number? (r-ans response1)) (number? (r-ans response2))
              (= (r-ans response1) (r-ans response2))) true]
        [else false]))


(define (sentinel-similarity response1 response2)
  (cond [(= (+ (sum-before-sentinel (sentinel-check response2))
               (sum-before-sentinel (sentinel-check response1))) 0) 0]
        [(> (length (sentinel-check response1)) (length (sentinel-check response2)))
         (/ (compare/response (sentinel-check response2) (sentinel-check response1))
            (+ (sum-before-sentinel (sentinel-check response2))
               (sum-before-sentinel (sentinel-check response1))))]  
        [else (/ (compare/response (sentinel-check response1)
                                   (sentinel-check response2))
                 (+ (sum-before-sentinel (sentinel-check response1))
                    (sum-before-sentinel (sentinel-check response2))))]))   
 

(define (sentinel-check response)
  (cond [(empty? response) empty]
        [(symbol=? (first response) 'sentinel) empty] 
        [else (cons (first response) (sentinel-check (rest response)))]))

(sentinel-check (r-ans (list 2 (list 'sports 'games 'photo 'sentinel 'cooking))))

;; assume response1 < response2
;; count1 = (length response1)
;; count2 = (length response2)
(define (compare response1 response2 count1 count2)
  (cond [(or (empty? response1) (empty? response2)) 0]
        [(symbol=? (first response1) (first response2)) (+ count1 count2)]
        [else (compare response1 (rest response2) count1 (sub1 count2))]))

(compare (list 'sports 'games 'photo) (list 'sports 'photo) 2 3)

(define (compare/response response1 response2) 
  (cond [(empty? response1) 0]
        [else (+ (compare response1 response2 (length response1) (length response2))
                 (compare (rest response1) response2 (sub1 (length response1)) (length response2)))]))

(compare/response (list 'sports 'photo) (list 'sports 'games 'photo))  

(define (sum-before-sentinel response)
  (cond [(empty? response) 0]
        [else (+ (length response) (sum-before-sentinel (rest response)))]))




