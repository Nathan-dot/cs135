;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-beginner-abbr-reader.ss" "lang")((modname a02q02) (read-case-sensitive #t) (teachpacks ()) (htdp-settings #(#t constructor repeating-decimal #f #t none #f () #f)))
;; ***************************************************
;; Nathan Kwon (20934403)
;; CS 135 Fall 2021
;; Assignment 05, Problem 2
;; ***************************************************

;; Data Definitions:
;; A Row is a (listof Num).
;; A Matrix is a (listof Row)
;;   Requires:  Each row has the same length; length > 0
;;              There is at least one row.

;; Constants:
(define ta (list (list 1 2 3 0)
                 (list 4 5 6 0)
                 (list 7 8 9 1))) ; given matrix for testing
(define ra (list (list 67 8 9 0)
                 (list 10 2 9 8)
                 (list 3 4 5 6)))

;; a.)
;; (matrix-add Matrix1 Matrix2) sums [Matrix1] and [Matrix2]
;;   to produces their sum.

;; Examples:
(check-expect (matrix-add ta ta)
              (list (list 2 4 6 0)
                    (list 8 10 12 0)
                    (list 14 16 18 2)))
(check-expect (matrix-add ra ta)
              (list (list 68 10 12 0)
                    (list 14 7 15 8)
                    (list 10 12 14 7)))

;; matrix-add: Matrix Matrix -> Matrix
(define (matrix-add Matrix1 Matrix2)
  (cond [(empty? Matrix1) empty]
        [else (cons (row-add (first Matrix1) (first Matrix2))
                    (matrix-add (rest Matrix1) (rest Matrix2)))]))

;; Tests:
(check-expect (matrix-add (list (list 0 0 0) (list 0 0 0) (list 0 0 0))
                          (list (list 0 0 0) (list 0 0 0) (list 0 0 0)))
              (list (list 0 0 0)
                    (list 0 0 0)
                    (list 0 0 0)))
(check-expect (matrix-add ra ra)
              (list (list 134 16 18 0)
                    (list 20 4 18 16)
                    (list 6 8 10 12)))
(check-expect (matrix-add (list (list -3.6 -7 -5/7 0) (list -8.9 -2 -8/7 0) (list 0 0 0 0)) ra)
              (list (list 63.4 1 58/7 0)
                    (list 1.1 0 55/7 8)
                    (list 3 4 5 6)))
(check-expect (matrix-add (list (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20)
                                (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20)
                                (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20))
                          (list (list 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
                                (list 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
                                (list 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)))
              (list (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20)
                    (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20)
                    (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20)))
(check-expect (matrix-add (list (list 15) (list 13) (list 12))
                          (list (list -9) (list -5) (list -7)))
              (list (list 6) (list 8) (list 5)))


;; (row-add row1 row2) produces the sum of two given rows, which are
;;   [row1] and [row2].

;; Examples:
(check-expect (row-add (list 2 4 6 0) (list 2 4 6 0)) (list 4 8 12 0))
(check-expect (row-add (list 3 12 9) (list 789 10000000 90)) (list 792 10000012 99))
(check-expect (row-add (list 0 0 0 0) (list 0 0 0 0)) (list 0 0 0 0))
(check-expect (row-add (list -5 -3.6 -2 -1.1 4/7) (list -2 -1 -3 0 5/7)) (list -7 -4.6 -5 -1.1 9/7)) 

;; row-add: Row Row -> Row
(define (row-add row1 row2)
  (cond [(empty? row1) empty]
        [else (cons (+ (first row1) (first row2))
                    (row-add (rest row1) (rest row2)))]))

;; b.)
;; (matrix-transpose)


